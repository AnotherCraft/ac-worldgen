// This file was automatically generated by /supp/autogen.

#include "../worldgenapi.h"

const WorldGenAPI::Functions &WorldGenAPI::functions() {
	static const Functions fs = [] {
		Functions fs;
		Function f;

		const auto finalize = [&]() {
			f.prototype = Function::composePrototype(f.name, iterator(f.arguments).mapx(x.type).toList());
			fs.list.push_back(f);
			fs.prototypeMapping[f.prototype] = f.id;
			if(!fs.nameSet.contains(f.name))
				fs.nameList.push_back(f.name);
			fs.nameSet.insert(f.name);
			fs.nameMapping[f.name].push_back(f.id);
		};

		f.section = "Utility functions";
		f.name = "worldPos";
		f.returnValue.name = "pos";
		f.arguments.resize(0);
		f.returnValue.type = WGA_Value::ValueType::Float3;
		f.id = 0;
		finalize();

		f.name = "select";
		f.returnValue.name = "result";
		f.arguments.resize(3);
		f.arguments[0].name = QStringLiteral("cond");
		f.arguments[1].name = QStringLiteral("thn");
		f.arguments[2].name = QStringLiteral("els");
		f.arguments[0].type = WGA_Value::ValueType::Bool;
		f.arguments[1].type = WGA_Value::ValueType::Float;
		f.arguments[2].type = WGA_Value::ValueType::Float;
		f.returnValue.type = WGA_Value::ValueType::Float;
		f.id = 1;
		finalize();

		f.arguments[1].type = WGA_Value::ValueType::Float2;
		f.arguments[2].type = WGA_Value::ValueType::Float2;
		f.returnValue.type = WGA_Value::ValueType::Float2;
		f.id = 2;
		finalize();

		f.arguments[1].type = WGA_Value::ValueType::Float3;
		f.arguments[2].type = WGA_Value::ValueType::Float3;
		f.returnValue.type = WGA_Value::ValueType::Float3;
		f.id = 3;
		finalize();

		f.arguments[1].type = WGA_Value::ValueType::Bool;
		f.arguments[2].type = WGA_Value::ValueType::Bool;
		f.returnValue.type = WGA_Value::ValueType::Bool;
		f.id = 4;
		finalize();

		f.arguments[1].type = WGA_Value::ValueType::Block;
		f.arguments[2].type = WGA_Value::ValueType::Block;
		f.returnValue.type = WGA_Value::ValueType::Block;
		f.id = 5;
		finalize();

		f.arguments[1].type = WGA_Value::ValueType::Rule;
		f.arguments[2].type = WGA_Value::ValueType::Rule;
		f.returnValue.type = WGA_Value::ValueType::Rule;
		f.id = 6;
		finalize();

		f.arguments[1].type = WGA_Value::ValueType::ComponentNode;
		f.arguments[2].type = WGA_Value::ValueType::ComponentNode;
		f.returnValue.type = WGA_Value::ValueType::ComponentNode;
		f.id = 7;
		finalize();


	}();
	return fs;
}
